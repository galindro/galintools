#!/usr/bin/python
import argparse, os, json, syslog, boto.ec2.autoscale, boto.ec2
from zabbix_api import ZabbixAPI
from galintools import infra_common, monitoring, aws
from galintools.settings import *

def get_as_zbx_groupid(config_as_group):
	zbx_groupid = None
	logger.debug("Getting autoscaling group id from Zabbix")
	zbx_groupid = zabbix.get_ids(names=config_as_group.split(), 
							     zapi_method=zapi.hostgroup,
							     api_filter_param='name',
							     api_id_result_key='groupid',
							     result_type='list')

	if not zbx_groupid:
		utils.set_return_code(1)

	return zbx_groupid

def get_as_zbx_instances(zbx_groupid):
	zbx_as_instances = None

	logger.debug("Getting all autoscaling group instances from Zabbix")
	zbx_as_instances = zapi.host.get({"groupids": zbx_groupid})

	return zbx_as_instances

def delete_zbx_host(zbx_as_instance):
	logger.info("Deleting host %s" % (zbx_as_instance['host']))

	try:
		zapi.host.delete([zbx_as_instance['hostid']])
	except Exception, e:
		logger.error("%sError while deleting host %s. Details: %s" % (zbx_as_instance['hostid'], str(e)))
		utils.set_return_code(1)
		return False

	return True

# Command line parsing
parser = argparse.ArgumentParser(description='Autoscaling Zabbix auto-registration')

parser.add_argument('-r','--region',
					default=settings['DEFAULT_REGION'], 
					choices=settings['REGIONS'], 
					help='AWS Region')

parser.add_argument('-c','--config', 
					required=True, 
					help='Config file')

args = parser.parse_args()

utils = infra_common.Utils()

config_parsed = utils.load_json_config(args.config)
if config_parsed == {}:
	exit(1)

try:
	logger = utils.create_new_logger(log_config=config_parsed['log'],
									 log_name=os.path.basename(__file__))
except Exception, e:
	logger = utils.create_new_logger(log_config=settings['log'],
									 log_name=os.path.basename(__file__))

if logger == 1:
	exit(1)

try:
	zapi = ZabbixAPI(server=config_parsed['API']['url'])
	zapi.login(config_parsed['API']['user'], config_parsed['API']['password'])
except Exception, e:
	logger.error("Can't login to Zabbix Server %s with config file's credentials. Details: %s" % (config_parsed['API']['url'],str(e)))
	exit(1)

zabbix = monitoring.Zabbix(logger=logger)
aws_ec2 = aws.Ec2(logger=logger, region=args.region)
aws_autoscaling = aws.Autoscaling(logger=logger, region=args.region)

autoscale = boto.ec2.autoscale.connect_to_region(args.region)
ec2 = boto.ec2.connect_to_region(args.region)

for config_as_group in config_parsed['Autoscaling']:
	
	#Get all autoscaling group's instances
	logger.debug("Getting all autoscaling group's instances")
	as_instances = aws_autoscaling.get_as_instances(config_as_group)

	if not as_instances:
		logger.error("Can't find any instance in autoscaling group %s" % (config_as_group))

		#Get autoscaling group id from Zabbix
		zbx_groupid = get_as_zbx_groupid(config_as_group)

		if not zbx_groupid:
			continue
		
		#Get all autoscaling group instances from Zabbix
		zbx_as_instances = get_as_zbx_instances(zbx_groupid)

		for zbx_as_instance in zbx_as_instances:
			delete_zbx_host(zbx_as_instance)

	else:
		instances = aws_ec2.get_instance_obj(instance_ids=as_instances)

		if instances:
			instance_ids = [i.id for i in instances]

			#Get autoscaling group id from Zabbix
			zbx_groupid = get_as_zbx_groupid(config_as_group)

			if not zbx_groupid:
				continue

			#Get all autoscaling group instances from Zabbix
			zbx_as_instances = get_as_zbx_instances(zbx_groupid)

			#Get template IDs
			logger.debug("Getting template IDs")
			templates = zabbix.get_ids(names=config_parsed['Autoscaling'][config_as_group]['templates'], 
									   zapi_method=zapi.template,
									   api_filter_param='host',
									   api_id_result_key='templateid')

			#Get group IDs
			logger.debug("Getting group IDs")
			groups = zabbix.get_ids(names=config_parsed['Autoscaling'][config_as_group]['groups'], 
								    zapi_method=zapi.hostgroup,
									api_filter_param='name',
									api_id_result_key='groupid')

			if not templates:
				logger.error("Error: can't continue because all of the templates informed in config file wasn't found in zabbix")
				utils.set_return_code(1)
				continue

			if not groups:
				logger.error("Error: can't continue because all of the groups informed in config file wasn't found in zabbix")
				utils.set_return_code(1)
				continue


			#Check if AWS autoscaling instances are included in Zabbix and insert them in Zabbix if not
			logger.debug("Checking if AWS autoscaling instances are included in Zabbix")
			for instance in instances:

				if config_parsed['Autoscaling'][config_as_group]['instance_ip_addr'] == 'ip_address':
					instace_ip = instance.ip_address
				elif config_parsed['Autoscaling'][config_as_group]['instance_ip_addr'] == 'private_ip_address':
					instace_ip = instance.private_ip_address
				else:
					logger.error("Parameter instance_ip_addr can have only two possible values: ip_address / private_ip_address")
					continue

				if not zapi.host.get({"filter":{"host":[instance.id]}}):
					host_creation_params = \
						{ \
							"host": instance.id, \
							"name": instance.tags['Name'] + "(" + instance.id + ")", \
							"interfaces": [ \
								{ \
									"type": 1, \
									"main": 1, \
									"useip": 1, \
									"ip":  instace_ip, \
									"dns": "", \
									"port": "10050" \
								} \
							], \
							"groups": groups, \
							"templates" : templates \
						}

					logger.info("Creating host %s" % (instance.id))

					try:
						zapi.host.create(host_creation_params)
					except Exception, e:
						logger.error("%sError while creating host %s. Details: %s" % (instance.id, str(e)))
						utils.set_return_code(1)

			#Check if Zabbix autoscaling instances exists in AWS autoscaling and remove them from Zabbix if not
			logger.debug("Checking if Zabbix autoscaling instances exists in AWS autoscaling")
			for zbx_as_instance in zbx_as_instances:
				if zbx_as_instance['host'] not in instance_ids:
					delete_zbx_host(zbx_as_instance)

exit(utils.return_code)
