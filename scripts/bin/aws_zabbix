#!/usr/bin/python
import argparse, os
from galintools import infra_common, monitoring, aws
from galintools.settings import *

def fn_autoscaling_discovery(args):
	print zabbix.aws_autoscaling_discovery(args.region)

def fn_autoscaling_count(args):
	print aws_autoscaling.count_as_instances(args.asgroup)

def fn_aws_status_discovery(args):
	print zabbix.aws_status_page_discovery(args.url)

def fn_aws_status_feed_status(args):
	print zabbix.get_feed_status(args.feedurl)

def fn_ec2_discovery(args):
	print zabbix.aws_ec2_discovery(args.region)

def fn_ec2_instance(args):
	instances = aws_ec2.get_instance_obj(instance_ids=args.instance_ids,
										 filters=args.filters)
	if args.count:
		print len(instances)

	elif args.fields:
		for instance in instances:
			print aws_ec2.get_instance_fields(instance_obj=instance, fields=args.fields)

def fn_trusted_advisor_discovery(args):
	print zabbix.aws_trusted_advisor_discovery(category=args.category, region=args.region)

def fn_trusted_advisor_summaries(args):
	aws_trusted_adv.get_trusted_advisor_check_summaries(check_id=args.check_id, check_name=args.check_name)
	print getattr(aws_trusted_adv,args.summary_type)


# Command line parsing
parser = argparse.ArgumentParser(description='Zabbix AWS Statistics')
subparsers = parser.add_subparsers()

parser.add_argument('-r','--region', 
					default=settings['DEFAULT_REGION'],
					choices=settings['REGIONS'],
					help='AWS Region')

parser.add_argument('-c','--config', 
					help='Config file')

####################################
####### command: autoscaling #######
####################################
autoscaling = subparsers.add_parser('autoscaling')
subcommand_autoscaling = autoscaling.add_subparsers()


# subcommand: discovery
autoscaling_discovery = subcommand_autoscaling.add_parser('discovery', help='This subcommand will return a JSON data with autoscaling group names for zabbix LLD discovery processing')
autoscaling_discovery.set_defaults(func=fn_autoscaling_discovery)


# subcommand: instance_count
autoscaling_count = subcommand_autoscaling.add_parser('instance_count', help='This subcommand will return the number of running instances withing autoscaling group')

autoscaling_count.add_argument('--asgroup', 
							   required=True,
							   help='Autoscaling group name')

autoscaling_count.set_defaults(func=fn_autoscaling_count)

###################################
####### command: aws_status #######
###################################
aws_status = subparsers.add_parser('aws_status')
subcommand_aws_status = aws_status.add_subparsers()

# subcommand: discovery
aws_status_discovery = subcommand_aws_status.add_parser('discovery', help='This subcommand will return a JSON data with all rss feeds from amazon status page for zabbix LLD discovery processing')

aws_status_discovery.add_argument('--url', 
								  default=settings['AWS_STATUS_PAGE'],
								  help='Amazon status page')

aws_status_discovery.set_defaults(func=fn_aws_status_discovery)

# subcommand: feed_status
aws_status_feed_status = subcommand_aws_status.add_parser('feed_status', help='This subcommand will get the latest feed menssage from feedurl')

aws_status_feed_status.add_argument('--feedurl',
									required=True,
									help='Amazon rss feed url')

aws_status_feed_status.set_defaults(func=fn_aws_status_feed_status)


####################################
########## command: ec2 ############
####################################
ec2 = subparsers.add_parser('ec2')
subcommand_ec2 = ec2.add_subparsers()

# subcommand: discovery
ec2_discovery = subcommand_ec2.add_parser('discovery', help='This subcommand will return a JSON data with all instances from desired region for zabbix LLD discovery processing')

ec2_discovery.set_defaults(func=fn_ec2_discovery)

# subcommand: instance
ec2_instance = subcommand_ec2.add_parser('instance', help='This subcommand will get info from ec2 instances')

ec2_instance_group = ec2_instance.add_mutually_exclusive_group(required=True)

ec2_instance_group.add_argument('--count',
								action="store_true",
								help='Count of result')

ec2_instance_group.add_argument('--fields',
								nargs='+',
						  		help='A list of fields to return. Details: http://boto.readthedocs.org/en/latest/ref/ec2.html#boto.ec2.instance.Instance')

ec2_instance.add_argument('--instance_ids',
						  nargs='+',
						  help='A list of strings of instance IDs')

ec2_instance.add_argument('--filters',
						  help='Instance filter. Details: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html and http://stackoverflow.com/questions/23053214/filtering-ec2-instances-with-boto')

ec2_instance.set_defaults(func=fn_ec2_instance)


############################################
######## command: trusted_advisor ##########
############################################
trusted_advisor = subparsers.add_parser('trusted_advisor')
subcommand_trusted_advisor = trusted_advisor.add_subparsers()

# subcommand: discovery
trusted_advisor_discovery = subcommand_trusted_advisor.add_parser('discovery', help='This subcommand will return a JSON data with all trusted advisor checks for zabbix LLD discovery processing')

trusted_advisor_discovery.add_argument('--category', 
										   required=True,
										   choices=settings['AWS_TRUSTED_ADVISOR_CATORIES'],
										   help='Amazon trusted advisor category')

trusted_advisor_discovery.set_defaults(func=fn_trusted_advisor_discovery)


# subcommand: summaries
trusted_advisor_summaries = subcommand_trusted_advisor.add_parser('summaries', help='This subcommand will get the summaries of trusted advisor check')

trusted_advisor_summaries.add_argument('--check_id', 
										required=True,
										help='Check ID')

trusted_advisor_summaries.add_argument('--check_name', 
										required=True,
										help='Check Name')

trusted_advisor_summaries.add_argument('--summary_type', 
										required=True,
										choices=['status',
												 'resources_flagged',
												 'resources_processed',
												 'resources_supressed',
												 'resources_ignored',
												 'estimated_percent_monthly_savings',
												 'estimated_monthly_savings'],
										help='Summary Type')

trusted_advisor_summaries.set_defaults(func=fn_trusted_advisor_summaries)


args = parser.parse_args()

utils = infra_common.Utils()

if args.config:
	config_parsed = utils.load_json_config(args.config)
	if config_parsed == {}:
		exit(1)

try:
	logger = utils.create_new_logger(log_config=config_parsed['log'],
									 log_name=os.path.basename(__file__))
except Exception, e:
	logger = utils.create_new_logger(log_config=settings['log'],
									 log_name=os.path.basename(__file__))

if logger == 1:
	exit(1)

zabbix = monitoring.Zabbix(logger=logger)
aws_autoscaling = aws.Autoscaling(logger=logger, region=args.region)
aws_ec2 = aws.Ec2(logger=logger, region=args.region)
aws_trusted_adv = aws.TrustedAdvisor(logger=logger, region=args.region)

try:
	args.func(args)
except Exception, e:
	utils.set_return_code(1)
	raise

exit(utils.return_code)
