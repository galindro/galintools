#!/usr/bin/python
import argparse, time, os, subprocess, re, gzip
from datetime import datetime
from galintools import infra_common, monitoring, aws, windows_azure, database
from galintools.settings import *

zabbix_mysql_value = 0
zabbix_azure_value = 0
zabbix_rsync_value = 0

# Command line parsing
parser = argparse.ArgumentParser(description='MySQL Backup')

parser.add_argument('-r','--region',
                    default=settings['DEFAULT_REGION'], 
                    choices=settings['REGIONS'], 
                    help='AWS Region')

parser.add_argument('-c','--config', 
                    required=True, 
                    help='Config file')

args = parser.parse_args()

utils = infra_common.Utils()

config_parsed = utils.load_json_config(args.config)
if config_parsed == {}:
  exit(1)

try:
  logger = utils.create_new_logger(log_config=config_parsed['log'],
                                   log_name=os.path.basename(__file__))
except Exception, e:
  logger = utils.create_new_logger(log_config=settings['log'],
                                   log_name=os.path.basename(__file__))

if logger == 1:
  exit(1)

if not os.access(config_parsed['Default']['mysqldump_bin'], os.X_OK):
  logger.error("Error: Mysqldump binary %s does not exists or isn't executable" %(config_parsed['Default']['mysqldump_bin']))
  exit(1)

if not os.access('/bin/sed', os.X_OK):
  logger.error("Error: /bin/sed does not exists or isn't executable")
  exit(1)

if not os.access('/usr/bin/ssh', os.X_OK):
  logger.error("Error: /usr/bin/ssh does not exists or isn't executable")
  exit(1)

def gzip_compress(file_in, compresslevel):
  file_out = file_in + '.gz'
  logger.info("Compressing file %s; format: gzip; compression_level: %s" %(file_in,compresslevel))
  try:
    f_in = open(file_in, 'rb')
    f_out = gzip.open(file_out, 'wb', int(compresslevel))
    f_out.writelines(f_in)
    f_out.close()
    f_in.close()
    os.remove(file_in)
  except Exception, e:
    file_out=file_in
    logger.exception("Error compressing file %s. Details: %s" %(file_in,e))

  return file_out

def set_zabbix_mysql_value(val):
  global zabbix_mysql_value
  zabbix_mysql_value += val

def set_zabbix_azure_value(val):
  global zabbix_azure_value
  zabbix_azure_value += val

def set_zabbix_rsync_value(val):
  global zabbix_rsync_value
  zabbix_rsync_value += val

def exec_thread(t):
  t.start()
  return t

def open_connection():
  mysql = None

  mysql = database.MySQL(logger=logger)

  mysql.mysql_connect(host=server,
                      user=config_parsed['Servers'][server]['user'],
                      password=config_parsed['Servers'][server]['password'])
  
  if not mysql:
    set_zabbix_mysql_value(1)
    utils.set_return_code(1)

  return mysql

def mysql_backup(bkp_dir, config_parsed, server, database_name, replications):
  return_code = 0
  bkp_file_name = bkp_dir + '/dump_' + database_name + '.sql'
  log_prefix = "server: " + server + "; dabatase: " + database_name + "; file: " + bkp_file_name + ": "

  mysqldump_cmd = [config_parsed['Default']['mysqldump_bin'],
                   "--routines",
                   "-h",
                   server,
                   "-u",
                   config_parsed['Servers'][server]['user'],
                   "-p%s" % (config_parsed['Servers'][server]['password']),
                   database_name]

  sed_cmd = ["/bin/sed", 
             "-e", 
             r"s/DEFINER[ ]*=[ ]*[^*]*\*/\*/"]

  logger.info(log_prefix + "Executing backup")
  if not os.path.exists(bkp_file_name):
    f = open(bkp_file_name, 'w')
    p_mysqldump_cmd = subprocess.Popen(mysqldump_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p_sed_cmd = subprocess.Popen(sed_cmd, stdin=p_mysqldump_cmd.stdout, stdout=f, stderr=subprocess.PIPE)

    p_mysqldump_cmd.stdout.close()
    p_sed_cmd_output = p_sed_cmd.communicate()
    p_mysqldump_cmd.wait()

    f.close()

    if p_mysqldump_cmd.returncode != 0 or p_sed_cmd.returncode != 0:
      logger.error("Error backing up database. Details: mysqldump error: %s; sed error: %s" % (p_mysqldump_cmd.stderr.readlines(), p_sed_cmd_output[1].decode('utf-8')))
      utils.set_return_code(p_mysqldump_cmd.returncode)
      set_zabbix_mysql_value(1)
      return p_mysqldump_cmd.returncode
    else:
      logger.info(log_prefix + "Backup completed successfully")

  else:
    logger.error("Error backing up database. File %s exists" % (bkp_file_name))
    set_zabbix_mysql_value(1)
    return 1

  if 'compression' in config_parsed['Servers'][server]:
    if config_parsed['Servers'][server]['compression']['algorithm'] == 'gzip':
      bkp_file_name = gzip_compress(file_in=bkp_file_name, compresslevel=config_parsed['Servers'][server]['compression']['compresslevel'])
      return_code = 1

  if replications:
    if 'azure' in replications:
      mtime = os.path.getmtime(bkp_file_name)
      azure = replications['azure'][0]
      container = replications['azure'][1]

      try:
        azure.azure_send(container, bkp_file_name, mtime)
      except Exception, e:
        logger.exception("Error syncing backup to azure. Details: %s" % (e))
        set_zabbix_azure_value(1)
        utils.set_return_code(1)
    
    elif 'rsync' in replications:

      if not os.access('/usr/bin/rsync', os.X_OK):
        logger.error("Error syncing backup with rsync. Details: /usr/bin/rsync does not exists or isn't executable")
        set_zabbix_rsync_value(1)
        utils.set_return_code(1)
        return 1

      else:
        user = replications['rsync'][0]
        host_dest = replications['rsync'][1]
        ssh_key = os.path.expanduser(replications['rsync'][2])
        dir_dest = os.path.dirname(bkp_file_name)

        if not os.path.exists(ssh_key):
          logger.error("Error syncing backup with rsync. Details: %s does not exists" %(ssh_key))
          set_zabbix_rsync_value(1)
          utils.set_return_code(1)
          return 1

        else:
          mkdir_cmd = ["/usr/bin/ssh",
                       "-i",
                       ssh_key,
                       "-o",
                       "UserKnownHostsFile=/dev/null",
                       "-o",
                       "StrictHostKeyChecking=no",
                       "%s@%s" %(user, host_dest),
                       "mkdir -p %s" %(dir_dest)]

          p_mkdir_cmd = subprocess.Popen(mkdir_cmd, stderr=subprocess.PIPE)
          p_mkdir_cmd_output = p_mkdir_cmd.communicate()
          if p_mkdir_cmd.returncode != 0:
            logger.error("Error syncing backup with rsync. Details: Error creating directory structure on destiny. %s" % (p_mkdir_cmd_output[1].decode('utf-8')))
            utils.set_return_code(p_mkdir_cmd.returncode)
            set_zabbix_rsync_value(1)
            return p_mkdir_cmd.returncode

          else:
            rsync_cmd = ["/usr/bin/rsync",
                         "-az",
                         "--partial",
                         "-e",
                         "ssh -i %s -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" %(ssh_key),
                         bkp_file_name,
                         "%s@%s:%s" %(user, host_dest, dir_dest)]
            
            p_rsync_cmd = subprocess.Popen(rsync_cmd, stderr=subprocess.PIPE)
            p_rsync_cmd_output = p_rsync_cmd.communicate()

            if p_rsync_cmd.returncode != 0:
              logger.error("Error syncing backup through rsync. Details: %s" % (p_rsync_cmd_output[1]))
              utils.set_return_code(p_rsync_cmd.returncode)
              set_zabbix_rsync_value(1)
              return p_rsync_cmd.returncode
            else:
              logger.info(log_prefix + "Rsync completed successfully")


  return return_code

for server in config_parsed['Servers']:

  zabbix = monitoring.Zabbix(logger=logger,
                             server=config_parsed['Default']['zabbix_server'] if 'zabbix_server' not in config_parsed['Servers'][server] else config_parsed['Servers'][server]['zabbix_server'],
                             hostname=config_parsed['Default']['zabbix_host'] if 'zabbix_host' not in config_parsed['Servers'][server] else config_parsed['Servers'][server]['zabbix_host'])

  replications = {}

  if 'replication' in config_parsed['Servers'][server]:
    for replication in config_parsed['Servers'][server]['replication']:
      if replication == 'azure':
        azure = windows_azure.AzureBlobService(logger=logger, 
                                               account_name=config_parsed['Servers'][server]['replication'][replication]['account_name'],
                                               account_key=config_parsed['Servers'][server]['replication'][replication]['account_key'])

        replications['azure'] = [azure,
                     config_parsed['Servers'][server]['replication'][replication]['container'],
                     config_parsed['Servers'][server]['replication'][replication]['zabbix_key']]

      elif replication == 'rsync':
        replications['rsync'] = [config_parsed['Servers'][server]['replication'][replication]['user'],
                                 config_parsed['Servers'][server]['replication'][replication]['host_dest'],
                                 config_parsed['Servers'][server]['replication'][replication]['ssh_key'],
                                 config_parsed['Servers'][server]['replication'][replication]['zabbix_key']]

  parallel_process = int(config_parsed['Servers'][server]['parallel_process']) if 'parallel_process' in config_parsed['Servers'][server] else int(config_parsed['Default']['parallel_process'])
  
  bkp_dir = re.sub(r'(/*)?$','/',os.path.expanduser(config_parsed['Servers'][server]['destination'])) + datetime.now().strftime("%Y%m%d%H%M%S")

  log_prefix = server + ": "
    
  if not os.path.exists(bkp_dir):
    try:
      os.makedirs(bkp_dir)
    except Exception, e:
      logger.error("Error creating directory %s. Details: %s" % (bkp_dir,e))
      utils.set_return_code(1)
      continue

  mysql_server = open_connection()

  if mysql_server:
    for database_name in mysql_server.get_databases(config_parsed['Servers'][server]['databases_regexp']):
      database_name = str(database_name)
      t = exec_thread(infra_common.NewThread(database_name, mysql_backup, bkp_dir, config_parsed, server, database_name, replications))
      time.sleep(2)
      active_count = t.active_count() - 1

      while active_count >= parallel_process:
        time.sleep(5)
        active_count = t.active_count() - 1

  zabbix.zabbix_sender(key=config_parsed['Servers'][server]['zabbix_key'],
                       value=zabbix_mysql_value)

  if replications:
    if 'azure' in replications:
      zabbix.zabbix_sender(key=replications['azure'][2],
                           value=zabbix_azure_value)
    
    elif 'rsync' in replications:
      zabbix.zabbix_sender(key=replications['rsync'][3],
                           value=zabbix_rsync_value)


exit(utils.return_code)

