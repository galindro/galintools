#!/usr/bin/python
import argparse, time, os, subprocess, re, gzip
from datetime import datetime
from galintools import infra_common, monitoring, aws, windows_azure, database
from galintools.settings import *

zabbix_mysql_value = 0
zabbix_azure_value = 0

# Command line parsing
parser = argparse.ArgumentParser(description='MySQL Backup')

parser.add_argument('-r','--region',
                    default=settings['DEFAULT_REGION'], 
                    choices=settings['REGIONS'], 
                    help='AWS Region')

parser.add_argument('-c','--config', 
                    required=True, 
                    help='Config file')

args = parser.parse_args()

utils = infra_common.Utils()

config_parsed = utils.load_json_config(args.config)
if config_parsed == {}:
  exit(1)

try:
  logger = utils.create_new_logger(log_config=config_parsed['log'],
                                   log_name=os.path.basename(__file__))
except Exception, e:
  logger = utils.create_new_logger(log_config=settings['log'],
                                   log_name=os.path.basename(__file__))

if logger == 1:
  exit(1)


def gzip_compress(file_in, compresslevel):
  file_out = file_in + '.gz'
  logger.info("Compressing file %s; format: gzip; compression_level: %s" %(file_in,compresslevel))
  try:
    f_in = open(file_in, 'rb')
    f_out = gzip.open(file_out, 'wb', int(compresslevel))
    f_out.writelines(f_in)
    f_out.close()
    f_in.close()
    os.remove(file_in)
  except Exception, e:
    file_out=file_in
    logger.exception("Error compressing file %s. Details: %s" %(file_in,e))

  return file_out

def set_zabbix_mysql_value(val):
  global zabbix_mysql_value
  zabbix_mysql_value += val

def set_zabbix_azure_value(val):
  global zabbix_azure_value
  zabbix_azure_value += val

def exec_thread(t):
  t.start()
  return t

def open_connection():
  return_obj = None

  try:
    return_obj = database.MySQL(logger=logger, 
                                host=server,
                                user=config_parsed['Servers'][server]['user'],
                                password=config_parsed['Servers'][server]['password'])

  except Exception, e:
    logger.exception("Error to connect to MySQL. Details: %s" % (e))
    utils.set_return_code(1)

  return return_obj

def mysql_backup(bkp_dir, config_parsed, server, database, replications):
  return_code = 0
  bkp_file_name = bkp_dir + '/dump_' + database + '.sql'
  log_prefix = "server: " + server + "; dabatase: " + database + "; file: " + bkp_file_name + ": "

  cmd = "%s --add-drop-database -h %s -u %s -p%s --databases %s" % (config_parsed['Servers'][server]['mysqldump_bin'],
                                                                    server,
                                                                    config_parsed['Servers'][server]['user'],
                                                                    config_parsed['Servers'][server]['password'],
                                                                    database)

  logger.info(log_prefix + "Executing backup")
  if not os.path.exists(bkp_file_name):
    f = open(bkp_file_name, 'w')
    p = subprocess.Popen(cmd, shell=True, stdout=f)
    p.communicate()
    f.close()

    if p.returncode != 0:
      logger.error("Error backing up database. Details: %s" % (p.stderr.readlines()))
      utils.set_return_code(p.returncode)
      set_zabbix_mysql_value(1)
      return p.returncode
    else:
      logger.info(log_prefix + "Backup completed successfully")

  else:
    logger.error("Error backing up database. File %s exists" % (bkp_file_name))
    set_zabbix_mysql_value(1)
    return 1

  if 'compression' in config_parsed['Servers'][server]:
    if config_parsed['Servers'][server]['compression']['algorithm'] == 'gzip':
      bkp_file_name = gzip_compress(file_in=bkp_file_name, compresslevel=config_parsed['Servers'][server]['compression']['compresslevel'])
      return_code = 1

  if replications:
    if 'azure' in replications:
      mtime = os.path.getmtime(bkp_file_name)
      azure = replications['azure'][0]
      container = replications['azure'][1]
      azure_sync_return_code = 1

      try:
        azure_sync_return_code = azure.azure_send(container, bkp_file_name, mtime)
      except Exception, e:
        logger.exception("Error syncing database to azure. Details: %s" % (e))
        set_zabbix_azure_value(1)
        utils.set_return_code(1)

  return return_code

for server in config_parsed['Servers']:

  zabbix = monitoring.Zabbix(logger=logger,
                             server=config_parsed['Default']['zabbix_server'] if 'zabbix_server' not in config_parsed['Servers'][server] else config_parsed['Servers'][server]['zabbix_server'],
                             hostname=config_parsed['Default']['zabbix_host'] if 'zabbix_host' not in config_parsed['Servers'][server] else config_parsed['Servers'][server]['zabbix_host'])

  replications = {}

  if 'replication' in config_parsed['Servers'][server]:
    for replication in config_parsed['Servers'][server]['replication']:
      if replication == 'azure':
        azure = windows_azure.AzureBlobService(logger=logger, 
                                               account_name=config_parsed['Servers'][server]['replication'][replication]['account_name'],
                                               account_key=config_parsed['Servers'][server]['replication'][replication]['account_key'])

        replications['azure'] = [azure,
                     config_parsed['Servers'][server]['replication'][replication]['container'],
                     config_parsed['Servers'][server]['replication'][replication]['zabbix_key']]

  parallel_process = int(config_parsed['Servers'][server]['parallel_process']) if 'parallel_process' not in config_parsed['Default'] else int(config_parsed['Default']['parallel_process'])
  
  bkp_dir = re.sub(r'(/*)?$','/',config_parsed['Servers'][server]['destination']) + datetime.now().strftime("%Y%m%d%H%M%S")

  log_prefix = server + ": "
    
  if not os.path.exists(bkp_dir):
    try:
      os.mkdir(bkp_dir)
    except Exception, e:
      logger.exception("Error creating directory %s. Details: %s" % (bkp_dir,e))
      utils.set_return_code(1)
      continue

  mysql_server = open_connection()

  if mysql_server:
    for database in mysql_server.get_databases(config_parsed['Servers'][server]['databases_regexp']):
      t = exec_thread(infra_common.NewThread(mysql_backup, bkp_dir, config_parsed, server, database, replications))
      time.sleep(2)
      active_count = t.active_count() - 1

      while active_count >= parallel_process:
        time.sleep(5)
        active_count = t.active_count() - 1

  zabbix.zabbix_sender(key=config_parsed['Servers'][server]['zabbix_key'],
                       value=zabbix_mysql_value)

  if replications:
    if 'azure' in replications:
      zabbix.zabbix_sender(key=replications['azure'][2],
                           value=zabbix_azure_value)

exit(utils.return_code)

